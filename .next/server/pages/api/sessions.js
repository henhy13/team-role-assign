"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/sessions";
exports.ids = ["pages/api/sessions"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsessions&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csessions.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsessions&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csessions.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   handler: () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/api-utils */ \"(api-node)/./node_modules/next/dist/server/api-utils/index.js\");\n/* harmony import */ var next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_sessions_ts__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./src\\pages\\api\\sessions.ts */ \"(api-node)/./src/pages/api/sessions.ts\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! next/dist/server/lib/trace/tracer */ \"(api-node)/./node_modules/next/dist/server/lib/trace/tracer.js\");\n/* harmony import */ var next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! next/dist/server/lib/trace/constants */ \"(api-node)/./node_modules/next/dist/server/lib/trace/constants.js\");\n/* harmony import */ var next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_sessions_ts__WEBPACK_IMPORTED_MODULE_4__]);\n_src_pages_api_sessions_ts__WEBPACK_IMPORTED_MODULE_4__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n// Import the userland code.\n\n\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_sessions_ts__WEBPACK_IMPORTED_MODULE_4__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_3__.hoist)(_src_pages_api_sessions_ts__WEBPACK_IMPORTED_MODULE_4__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_2__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/sessions\",\n        pathname: \"/api/sessions\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _src_pages_api_sessions_ts__WEBPACK_IMPORTED_MODULE_4__,\n    distDir: \".next\" || 0,\n    projectDir:  false || ''\n});\nasync function handler(req, res, ctx) {\n    let srcPage = \"/api/sessions\";\n    // turbopack doesn't normalize `/index` in the page name\n    // so we need to to process dynamic routes properly\n    // TODO: fix turbopack providing differing value from webpack\n    if (false) {}\n    const prepareResult = await routeModule.prepare(req, res, {\n        srcPage\n    });\n    if (!prepareResult) {\n        res.statusCode = 400;\n        res.end('Bad Request');\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n        return;\n    }\n    const { query, params, prerenderManifest } = prepareResult;\n    try {\n        const method = req.method || 'GET';\n        const tracer = (0,next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.getTracer)();\n        const activeSpan = tracer.getActiveScopeSpan();\n        const onRequestError = routeModule.instrumentationOnRequestError.bind(routeModule);\n        const invokeRouteModule = async (span)=>routeModule.render(req, res, {\n                query: {\n                    ...query,\n                    ...params\n                },\n                params,\n                allowedRevalidateHeaderKeys: undefined,\n                multiZoneDraftMode: Boolean(\"false\"),\n                trustHostHeader: undefined,\n                // TODO: get this from from runtime env so manifest\n                // doesn't need to load\n                previewProps: prerenderManifest.preview,\n                propagateError: false,\n                dev: routeModule.isDev,\n                page: \"/api/sessions\",\n                projectDir:  false || '',\n                onError: (...args)=>onRequestError(req, ...args)\n            }).finally(()=>{\n                if (!span) return;\n                span.setAttributes({\n                    'http.status_code': res.statusCode,\n                    'next.rsc': false\n                });\n                const rootSpanAttributes = tracer.getRootSpanAttributes();\n                // We were unable to get attributes, probably OTEL is not enabled\n                if (!rootSpanAttributes) {\n                    return;\n                }\n                if (rootSpanAttributes.get('next.span_type') !== next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest) {\n                    console.warn(`Unexpected root span type '${rootSpanAttributes.get('next.span_type')}'. Please report this Next.js issue https://github.com/vercel/next.js`);\n                    return;\n                }\n                const route = rootSpanAttributes.get('next.route');\n                if (route) {\n                    const name = `${method} ${route}`;\n                    span.setAttributes({\n                        'next.route': route,\n                        'http.route': route,\n                        'next.span_name': name\n                    });\n                    span.updateName(name);\n                } else {\n                    span.updateName(`${method} ${req.url}`);\n                }\n            });\n        // TODO: activeSpan code path is for when wrapped by\n        // next-server can be removed when this is no longer used\n        if (activeSpan) {\n            await invokeRouteModule(activeSpan);\n        } else {\n            await tracer.withPropagatedContext(req.headers, ()=>tracer.trace(next_dist_server_lib_trace_constants__WEBPACK_IMPORTED_MODULE_6__.BaseServerSpan.handleRequest, {\n                    spanName: `${method} ${req.url}`,\n                    kind: next_dist_server_lib_trace_tracer__WEBPACK_IMPORTED_MODULE_5__.SpanKind.SERVER,\n                    attributes: {\n                        'http.method': method,\n                        'http.target': req.url\n                    }\n                }, invokeRouteModule));\n        }\n    } catch (err) {\n        // we re-throw in dev to show the error overlay\n        if (routeModule.isDev) {\n            throw err;\n        }\n        // this is technically an invariant as error handling\n        // should be done inside of api-resolver onError\n        (0,next_dist_server_api_utils__WEBPACK_IMPORTED_MODULE_0__.sendError)(res, 500, 'Internal Server Error');\n    } finally{\n        // We don't allow any waitUntil work in pages API routes currently\n        // so if callback is present return with resolved promise since no\n        // pending work\n        ctx.waitUntil == null ? void 0 : ctx.waitUntil.call(ctx, Promise.resolve());\n    }\n}\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsessions&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csessions.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./src/lib/schema.ts":
/*!***************************!*\
  !*** ./src/lib/schema.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApplicantSchema: () => (/* binding */ ApplicantSchema),\n/* harmony export */   AssignTeamSchema: () => (/* binding */ AssignTeamSchema),\n/* harmony export */   BatchAssignSchema: () => (/* binding */ BatchAssignSchema),\n/* harmony export */   BatchStatusSchema: () => (/* binding */ BatchStatusSchema),\n/* harmony export */   BulkSubmitSchema: () => (/* binding */ BulkSubmitSchema),\n/* harmony export */   CreateSessionSchema: () => (/* binding */ CreateSessionSchema),\n/* harmony export */   DEFAULT_ROLES: () => (/* binding */ DEFAULT_ROLES),\n/* harmony export */   EndSessionSchema: () => (/* binding */ EndSessionSchema),\n/* harmony export */   JoinSessionSchema: () => (/* binding */ JoinSessionSchema),\n/* harmony export */   SessionSettingsSchema: () => (/* binding */ SessionSettingsSchema),\n/* harmony export */   SubmitApplicantSchema: () => (/* binding */ SubmitApplicantSchema),\n/* harmony export */   TeamSchema: () => (/* binding */ TeamSchema),\n/* harmony export */   UpdateSessionSchema: () => (/* binding */ UpdateSessionSchema),\n/* harmony export */   validateRequest: () => (/* binding */ validateRequest)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"zod\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_0__]);\nzod__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst ApplicantSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, 'Name is required').max(100, 'Name too long'),\n    occupation: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, 'Occupation is required').max(100, 'Occupation too long'),\n    skills: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(50)).min(1, 'At least one skill is required').max(10, 'Too many skills'),\n    personalityTraits: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(50)).min(1, 'At least one trait is required').max(10, 'Too many traits')\n});\nconst TeamSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, 'Team name is required').max(100, 'Team name too long'),\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid session ID')\n});\nconst SubmitApplicantSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid session ID'),\n    teamId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid team ID'),\n    applicant: ApplicantSchema\n});\nconst AssignTeamSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    teamId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid team ID'),\n    phase: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n        'part1',\n        'part2'\n    ]).optional().default('part1'),\n    customRoles: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(100)).length(10).optional()\n});\nconst BulkSubmitSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    applications: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        sessionId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid session ID'),\n        teamId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid team ID'),\n        applicant: ApplicantSchema\n    })).min(1, 'At least one application required').max(500, 'Too many applications (max 500)'),\n    options: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        validateTeamLimits: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true),\n        skipDuplicateNames: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false)\n    }).optional()\n});\nconst BatchAssignSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    requests: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        teamId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid team ID'),\n        phase: zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n            'part1',\n            'part2'\n        ]).optional().default('part1'),\n        customRoles: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(100)).length(10).optional()\n    })).min(1, 'At least one team required').max(100, 'Too many teams (max 100)'),\n    options: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        maxConcurrency: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1).max(50).default(10),\n        retryFailedRequests: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true),\n        includeJustifications: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true)\n    }).optional()\n});\nconst BatchStatusSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    teamIds: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid()).optional(),\n    sessionIds: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid()).optional(),\n    options: zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n        includeDetails: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n        includeStats: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false)\n    }).optional()\n}).refine((data)=>data.teamIds || data.sessionIds, {\n    message: \"Either teamIds or sessionIds must be provided\"\n});\n// NEW: Session Management Schemas\nconst SessionSettingsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    maxTeams: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(1).max(1000).optional(),\n    maxApplicantsPerTeam: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(5).max(20).default(10),\n    allowSelfRegistration: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true),\n    enablePart2: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(true),\n    autoEndAfterAllComplete: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n    sessionCode: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^[A-Z0-9]{6}$/, 'Session code must be 6 uppercase letters/numbers').optional()\n});\nconst CreateSessionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, 'Session name is required').max(200, 'Session name too long'),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(1000, 'Description too long').optional(),\n    createdBy: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, 'Creator identifier is required').max(100, 'Creator name too long'),\n    settings: SessionSettingsSchema.optional()\n});\nconst UpdateSessionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid session ID'),\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1).max(200).optional(),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(1000).optional(),\n    settings: SessionSettingsSchema.partial().optional()\n});\nconst EndSessionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid session ID'),\n    confirmEnd: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().refine((val)=>val === true, 'Must confirm session end'),\n    clearMemory: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n    exportData: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false)\n});\nconst JoinSessionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    sessionCode: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^[A-Z0-9]{6}$/, 'Invalid session code format').optional(),\n    sessionId: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().uuid('Invalid session ID').optional()\n}).refine((data)=>data.sessionCode || data.sessionId, {\n    message: \"Either sessionCode or sessionId must be provided\"\n});\nfunction validateRequest(schema, data) {\n    try {\n        const validatedData = schema.parse(data);\n        return {\n            success: true,\n            data: validatedData\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            return {\n                success: false,\n                error: error.issues.map((issue)=>`${issue.path.join('.')}: ${issue.message}`).join(', ')\n            };\n        }\n        return {\n            success: false,\n            error: 'Validation failed'\n        };\n    }\n}\nconst DEFAULT_ROLES = [\n    'Team Leader',\n    'Technical Specialist',\n    'Creative Director',\n    'Strategy Advisor',\n    'Data Analyst',\n    'Project Coordinator',\n    'Quality Assurance',\n    'Communications Lead',\n    'Resource Manager',\n    'Innovation Driver'\n];\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/schema.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/sessionManager.ts":
/*!***********************************!*\
  !*** ./src/lib/sessionManager.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SessionManager: () => (/* binding */ SessionManager)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"uuid\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_0__]);\nuuid__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// In-memory storage for sessions (replace with database in production)\nconst sessions = new Map();\nconst sessionCodes = new Map(); // Maps session codes to session IDs\nclass SessionManager {\n    // Create a new session\n    static createSession(name, description = '', createdBy = 'admin', settings = {}) {\n        const defaultSettings = {\n            maxApplicantsPerTeam: 10,\n            allowSelfRegistration: true,\n            enablePart2: true,\n            autoEndAfterAllComplete: false,\n            ...settings\n        };\n        // Generate session code if not provided\n        const sessionCode = settings.sessionCode || this.generateSessionCode();\n        const session = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            name,\n            description,\n            status: 'active',\n            createdAt: new Date(),\n            createdBy,\n            settings: {\n                ...defaultSettings,\n                sessionCode\n            },\n            stats: {\n                totalTeams: 0,\n                completeTeams: 0,\n                totalApplicants: 0,\n                assignedTeams: 0,\n                lastActivity: new Date()\n            }\n        };\n        sessions.set(session.id, session);\n        if (sessionCode) {\n            sessionCodes.set(sessionCode, session.id);\n        }\n        // Auto-create teams for the session\n        createTeamsForSession(session.id, settings.maxTeams || 10);\n        console.log(`Session created: \"${name}\" (${session.id}) with code: ${sessionCode}`);\n        return session;\n    }\n    // Get session by ID\n    static getSession(sessionId) {\n        return sessions.get(sessionId) || null;\n    }\n    // Get session by code\n    static getSessionByCode(sessionCode) {\n        const sessionId = sessionCodes.get(sessionCode);\n        return sessionId ? sessions.get(sessionId) || null : null;\n    }\n    // Get all sessions\n    static getAllSessions() {\n        return Array.from(sessions.values()).sort((a, b)=>b.createdAt.getTime() - a.createdAt.getTime());\n    }\n    // Get active sessions only\n    static getActiveSessions() {\n        return this.getAllSessions().filter((s)=>s.status === 'active');\n    }\n    // Update session\n    static updateSession(sessionId, updates) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        if (session.status === 'ended') {\n            return {\n                success: false,\n                error: 'Cannot update ended session'\n            };\n        }\n        // Update fields\n        if (updates.name) session.name = updates.name;\n        if (updates.description !== undefined) session.description = updates.description;\n        if (updates.settings) {\n            session.settings = {\n                ...session.settings,\n                ...updates.settings\n            };\n            // Update session code mapping if changed\n            if (updates.settings.sessionCode && updates.settings.sessionCode !== session.settings.sessionCode) {\n                // Remove old code mapping\n                for (const [code, id] of sessionCodes.entries()){\n                    if (id === sessionId) {\n                        sessionCodes.delete(code);\n                        break;\n                    }\n                }\n                // Add new code mapping\n                sessionCodes.set(updates.settings.sessionCode, sessionId);\n            }\n        }\n        sessions.set(sessionId, session);\n        return {\n            success: true,\n            session\n        };\n    }\n    // End a session and optionally clear memory\n    static endSession(sessionId, options = {}) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        if (session.status === 'ended') {\n            return {\n                success: false,\n                error: 'Session already ended'\n            };\n        }\n        // Generate session summary before ending\n        const summaryResult = this.generateSessionSummary(sessionId);\n        const sessionSummary = summaryResult.success ? summaryResult.summary : undefined;\n        // Mark as ended\n        session.status = 'ended';\n        session.endedAt = new Date();\n        sessions.set(sessionId, session);\n        // Clear session code mapping\n        for (const [code, id] of sessionCodes.entries()){\n            if (id === sessionId) {\n                sessionCodes.delete(code);\n                break;\n            }\n        }\n        console.log(`Session ended: \"${session.name}\" (${sessionId})`);\n        // Clear memory if requested (remove all teams and assignments for this session)\n        if (options.clearMemory) {\n            this.clearSessionMemory(sessionId);\n            console.log(`Memory cleared for session: ${sessionId}`);\n        }\n        return {\n            success: true,\n            sessionSummary\n        };\n    }\n    // Archive a session (move to archived status but keep data)\n    static archiveSession(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        if (session.status === 'active') {\n            return {\n                success: false,\n                error: 'Cannot archive active session. End it first.'\n            };\n        }\n        session.status = 'archived';\n        sessions.set(sessionId, session);\n        return {\n            success: true\n        };\n    }\n    // Delete a session completely (irreversible)\n    static deleteSession(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        // Clear all associated data\n        this.clearSessionMemory(sessionId);\n        // Remove session code mapping\n        for (const [code, id] of sessionCodes.entries()){\n            if (id === sessionId) {\n                sessionCodes.delete(code);\n                break;\n            }\n        }\n        // Remove session\n        sessions.delete(sessionId);\n        console.log(`Session deleted: ${sessionId}`);\n        return {\n            success: true\n        };\n    }\n    // Update session statistics\n    static updateSessionStats(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        // Import TeamManager dynamically to avoid circular dependency\n        const { TeamManager } = __webpack_require__(/*! ./teamManager */ \"(api-node)/./src/lib/teamManager.ts\");\n        const currentStats = TeamManager.getSessionStats(sessionId);\n        // Update session statistics with current data\n        session.stats = {\n            ...currentStats,\n            lastActivity: new Date()\n        };\n        sessions.set(sessionId, session);\n        return {\n            success: true\n        };\n    }\n    // Generate session summary\n    static generateSessionSummary(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        // Import TeamManager dynamically to avoid circular dependency\n        const { TeamManager } = __webpack_require__(/*! ./teamManager */ \"(api-node)/./src/lib/teamManager.ts\");\n        const teamSummaryData = TeamManager.getSessionSummaryData(sessionId);\n        const sessionStats = TeamManager.getSessionStats(sessionId);\n        // Calculate average team score\n        const teamsWithScores = teamSummaryData.filter((team)=>team.assignmentScore !== undefined);\n        const averageTeamScore = teamsWithScores.length > 0 ? teamsWithScores.reduce((sum, team)=>sum + (team.assignmentScore || 0), 0) / teamsWithScores.length : undefined;\n        const summary = {\n            sessionId: session.id,\n            sessionName: session.name,\n            teams: teamSummaryData,\n            overallStats: {\n                totalParticipants: sessionStats.totalApplicants,\n                averageTeamScore,\n                completionRate: sessionStats.totalTeams > 0 ? sessionStats.completeTeams / sessionStats.totalTeams * 100 : 0\n            }\n        };\n        return {\n            success: true,\n            summary\n        };\n    }\n    // Clear session memory (remove all teams and assignments)\n    static clearSessionMemory(sessionId) {\n        // Import TeamManager dynamically to avoid circular dependency\n        const { TeamManager } = __webpack_require__(/*! ./teamManager */ \"(api-node)/./src/lib/teamManager.ts\");\n        const result = TeamManager.clearSessionData(sessionId);\n        if (result.success) {\n            console.log(`Memory cleared for session ${sessionId}: ${result.cleared?.teams || 0} teams, ${result.cleared?.assignments || 0} assignments`);\n        } else {\n            console.error(`Failed to clear memory for session ${sessionId}: ${result.error}`);\n        }\n    }\n    // Generate a unique session code\n    static generateSessionCode() {\n        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n        let code = '';\n        do {\n            code = '';\n            for(let i = 0; i < 6; i++){\n                code += chars.charAt(Math.floor(Math.random() * chars.length));\n            }\n        }while (sessionCodes.has(code)); // Ensure uniqueness\n        return code;\n    }\n    // Validate session is active and can accept operations\n    static validateActiveSession(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                valid: false,\n                error: 'Session not found'\n            };\n        }\n        if (session.status !== 'active') {\n            return {\n                valid: false,\n                error: `Session is ${session.status} and cannot accept new operations`\n            };\n        }\n        return {\n            valid: true\n        };\n    }\n    // Get session statistics\n    static getSessionStats(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        return {\n            success: true,\n            stats: session.stats\n        };\n    }\n    // Auto-end session if configured and all teams are complete\n    static checkAutoEndCondition(sessionId) {\n        const session = sessions.get(sessionId);\n        if (!session || session.status !== 'active') {\n            return {\n                shouldEnd: false\n            };\n        }\n        if (!session.settings.autoEndAfterAllComplete) {\n            return {\n                shouldEnd: false\n            };\n        }\n        // Check if all teams have assignments\n        if (session.stats.totalTeams > 0 && session.stats.assignedTeams >= session.stats.totalTeams) {\n            return {\n                shouldEnd: true,\n                reason: 'All teams have been assigned roles'\n            };\n        }\n        return {\n            shouldEnd: false\n        };\n    }\n    // Cleanup old ended sessions (utility for memory management)\n    static cleanupOldSessions(daysToKeep = 30) {\n        const cutoffDate = new Date();\n        cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);\n        let cleaned = 0;\n        for (const [sessionId, session] of sessions.entries()){\n            if (session.status === 'ended' && session.endedAt && session.endedAt < cutoffDate) {\n                this.deleteSession(sessionId);\n                cleaned++;\n            }\n        }\n        console.log(`Cleaned up ${cleaned} old sessions`);\n        return {\n            cleaned\n        };\n    }\n}\n// Helper function to auto-create teams for a session\nfunction createTeamsForSession(sessionId, maxTeams) {\n    // Import TeamManager dynamically to avoid circular dependency\n    const { TeamManager } = __webpack_require__(/*! ./teamManager */ \"(api-node)/./src/lib/teamManager.ts\");\n    // Create teams: Team 1, Team 2, Team 3, etc.\n    for(let i = 1; i <= maxTeams; i++){\n        const result = TeamManager.createTeam(`Team ${i}`, sessionId);\n        if (!result.success) {\n            console.error(`Failed to create Team ${i} for session ${sessionId}: ${result.error}`);\n        }\n    }\n    console.log(`Auto-created ${maxTeams} teams for session ${sessionId}`);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/sessionManager.ts\n");

/***/ }),

/***/ "(api-node)/./src/lib/teamManager.ts":
/*!********************************!*\
  !*** ./src/lib/teamManager.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TeamManager: () => (/* binding */ TeamManager)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"uuid\");\n/* harmony import */ var _sessionManager__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sessionManager */ \"(api-node)/./src/lib/sessionManager.ts\");\n/* harmony import */ var _schema__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schema */ \"(api-node)/./src/lib/schema.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([uuid__WEBPACK_IMPORTED_MODULE_0__, _sessionManager__WEBPACK_IMPORTED_MODULE_1__, _schema__WEBPACK_IMPORTED_MODULE_2__]);\n([uuid__WEBPACK_IMPORTED_MODULE_0__, _sessionManager__WEBPACK_IMPORTED_MODULE_1__, _schema__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n// In-memory storage (replace with database in production) - now session-scoped\nconst teams = new Map();\nconst sessions = new Map();\nclass TeamManager {\n    // Create a new team (now requires sessionId)\n    static createTeam(name, sessionId) {\n        // Validate session is active\n        const sessionValidation = _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.validateActiveSession(sessionId);\n        if (!sessionValidation.valid) {\n            return {\n                success: false,\n                error: sessionValidation.error\n            };\n        }\n        const team = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            name,\n            applicants: [],\n            createdAt: new Date(),\n            isComplete: false,\n            sessionId\n        };\n        teams.set(team.id, team);\n        // Update session stats\n        _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.updateSessionStats(sessionId);\n        return {\n            success: true,\n            team\n        };\n    }\n    // Get team by ID\n    static getTeam(teamId) {\n        return teams.get(teamId) || null;\n    }\n    // Get all teams (optionally filtered by session)\n    static getAllTeams(sessionId) {\n        const allTeams = Array.from(teams.values());\n        return sessionId ? allTeams.filter((team)=>team.sessionId === sessionId) : allTeams;\n    }\n    // Get teams for a specific session\n    static getTeamsForSession(sessionId) {\n        return Array.from(teams.values()).filter((team)=>team.sessionId === sessionId);\n    }\n    // Add applicant to team (with session validation)\n    static addApplicant(teamId, applicantData) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                success: false,\n                error: 'Team not found'\n            };\n        }\n        // Validate session is still active\n        const sessionValidation = _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.validateActiveSession(team.sessionId);\n        if (!sessionValidation.valid) {\n            return {\n                success: false,\n                error: `Cannot add applicant: ${sessionValidation.error}`\n            };\n        }\n        if (team.applicants.length >= 10) {\n            return {\n                success: false,\n                error: 'Team is already full (10 applicants maximum)'\n            };\n        }\n        // Check for duplicate names in the same team\n        if (team.applicants.some((a)=>a.name.toLowerCase() === applicantData.name.toLowerCase())) {\n            return {\n                success: false,\n                error: 'An applicant with this name already exists in the team'\n            };\n        }\n        const applicant = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            ...applicantData,\n            submittedAt: new Date()\n        };\n        team.applicants.push(applicant);\n        team.isComplete = team.applicants.length === 10;\n        teams.set(teamId, team);\n        // Update session stats\n        _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.updateSessionStats(team.sessionId);\n        return {\n            success: true,\n            applicant\n        };\n    }\n    // Remove applicant from team\n    static removeApplicant(teamId, applicantId) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                success: false,\n                error: 'Team not found'\n            };\n        }\n        // Validate session is still active\n        const sessionValidation = _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.validateActiveSession(team.sessionId);\n        if (!sessionValidation.valid) {\n            return {\n                success: false,\n                error: `Cannot remove applicant: ${sessionValidation.error}`\n            };\n        }\n        const applicantIndex = team.applicants.findIndex((a)=>a.id === applicantId);\n        if (applicantIndex === -1) {\n            return {\n                success: false,\n                error: 'Applicant not found in team'\n            };\n        }\n        team.applicants.splice(applicantIndex, 1);\n        team.isComplete = team.applicants.length === 10;\n        teams.set(teamId, team);\n        // Update session stats\n        _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.updateSessionStats(team.sessionId);\n        return {\n            success: true\n        };\n    }\n    // Create assignment session\n    static createAssignmentSession(teamId, phase = 'part1', customRoles) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                success: false,\n                error: 'Team not found'\n            };\n        }\n        // Validate parent session is still active\n        const sessionValidation = _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.validateActiveSession(team.sessionId);\n        if (!sessionValidation.valid) {\n            return {\n                success: false,\n                error: `Cannot create assignment: ${sessionValidation.error}`\n            };\n        }\n        if (!team.isComplete) {\n            return {\n                success: false,\n                error: 'Team must have exactly 10 applicants before assignment'\n            };\n        }\n        // Create role definitions\n        let roles;\n        if (phase === 'part2' && customRoles) {\n            if (customRoles.length !== 10) {\n                return {\n                    success: false,\n                    error: 'Must provide exactly 10 custom roles for part 2'\n                };\n            }\n            roles = customRoles.map((name, index)=>({\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n                    name: name.trim() || `Role #${index + 1}`\n                }));\n        } else {\n            roles = _schema__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_ROLES.map((name, index)=>({\n                    id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n                    name\n                }));\n        }\n        const session = {\n            id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__.v4)(),\n            teamId,\n            phase,\n            roles,\n            status: 'pending',\n            createdAt: new Date()\n        };\n        sessions.set(session.id, session);\n        return {\n            success: true,\n            session\n        };\n    }\n    // Get assignment session\n    static getAssignmentSession(sessionId) {\n        return sessions.get(sessionId) || null;\n    }\n    // Get latest assignment session for team\n    static getLatestSessionForTeam(teamId) {\n        const teamSessions = Array.from(sessions.values()).filter((s)=>s.teamId === teamId).sort((a, b)=>b.createdAt.getTime() - a.createdAt.getTime());\n        return teamSessions[0] || null;\n    }\n    // Update session status\n    static updateSessionStatus(sessionId, status) {\n        const session = sessions.get(sessionId);\n        if (!session) {\n            return {\n                success: false,\n                error: 'Session not found'\n            };\n        }\n        session.status = status;\n        sessions.set(sessionId, session);\n        return {\n            success: true\n        };\n    }\n    // Reset team (remove all applicants) - with session validation\n    static resetTeam(teamId) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                success: false,\n                error: 'Team not found'\n            };\n        }\n        // Validate session is still active (only active sessions can be reset)\n        const sessionValidation = _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.validateActiveSession(team.sessionId);\n        if (!sessionValidation.valid) {\n            return {\n                success: false,\n                error: `Cannot reset team: ${sessionValidation.error}`\n            };\n        }\n        team.applicants = [];\n        team.isComplete = false;\n        teams.set(teamId, team);\n        // Also remove any associated assignment sessions\n        const teamSessions = Array.from(sessions.entries()).filter(([_, session])=>session.teamId === teamId);\n        teamSessions.forEach(([sessionId, _])=>{\n            sessions.delete(sessionId);\n        });\n        // Update session stats\n        _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.updateSessionStats(team.sessionId);\n        return {\n            success: true\n        };\n    }\n    // Delete team completely - with session validation\n    static deleteTeam(teamId) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                success: false,\n                error: 'Team not found'\n            };\n        }\n        // Validate session is still active (only active sessions can have teams deleted)\n        const sessionValidation = _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.validateActiveSession(team.sessionId);\n        if (!sessionValidation.valid) {\n            return {\n                success: false,\n                error: `Cannot delete team: ${sessionValidation.error}`\n            };\n        }\n        teams.delete(teamId);\n        // Also remove any associated assignment sessions\n        const teamSessions = Array.from(sessions.entries()).filter(([_, session])=>session.teamId === teamId);\n        teamSessions.forEach(([sessionId, _])=>{\n            sessions.delete(sessionId);\n        });\n        // Update session stats\n        _sessionManager__WEBPACK_IMPORTED_MODULE_1__.SessionManager.updateSessionStats(team.sessionId);\n        return {\n            success: true\n        };\n    }\n    // Get team statistics\n    static getTeamStats(teamId) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                success: false,\n                error: 'Team not found'\n            };\n        }\n        const allSkills = team.applicants.flatMap((a)=>a.skills);\n        const uniqueSkills = [\n            ...new Set(allSkills)\n        ];\n        const uniqueOccupations = [\n            ...new Set(team.applicants.map((a)=>a.occupation))\n        ];\n        return {\n            success: true,\n            stats: {\n                totalApplicants: team.applicants.length,\n                isComplete: team.isComplete,\n                skills: uniqueSkills,\n                occupations: uniqueOccupations\n            }\n        };\n    }\n    // NEW: Session-scoped operations for memory management\n    // Clear all teams and assignments for a specific session\n    static clearSessionData(sessionId) {\n        try {\n            // Remove all teams for this session\n            const sessionTeams = Array.from(teams.entries()).filter(([_, team])=>team.sessionId === sessionId);\n            const teamIds = sessionTeams.map(([teamId, _])=>teamId);\n            let teamsCleared = 0;\n            for (const teamId of teamIds){\n                teams.delete(teamId);\n                teamsCleared++;\n            }\n            // Remove all assignment sessions for these teams\n            const assignmentSessionsToRemove = Array.from(sessions.entries()).filter(([_, session])=>teamIds.includes(session.teamId));\n            let assignmentsCleared = 0;\n            for (const [assignmentSessionId, _] of assignmentSessionsToRemove){\n                sessions.delete(assignmentSessionId);\n                assignmentsCleared++;\n            }\n            console.log(`Cleared session data: ${teamsCleared} teams, ${assignmentsCleared} assignments for session ${sessionId}`);\n            return {\n                success: true,\n                cleared: {\n                    teams: teamsCleared,\n                    assignments: assignmentsCleared\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: `Failed to clear session data: ${error instanceof Error ? error.message : 'Unknown error'}`\n            };\n        }\n    }\n    // Get session statistics for integration with SessionManager\n    static getSessionStats(sessionId) {\n        const sessionTeams = this.getTeamsForSession(sessionId);\n        const completeTeams = sessionTeams.filter((team)=>team.isComplete).length;\n        const totalApplicants = sessionTeams.reduce((sum, team)=>sum + team.applicants.length, 0);\n        // Count teams with assignments\n        const assignedTeams = sessionTeams.filter((team)=>{\n            const latestSession = this.getLatestSessionForTeam(team.id);\n            return latestSession && latestSession.assignment;\n        }).length;\n        return {\n            totalTeams: sessionTeams.length,\n            completeTeams,\n            totalApplicants,\n            assignedTeams\n        };\n    }\n    // Validate team belongs to session\n    static validateTeamSession(teamId, expectedSessionId) {\n        const team = teams.get(teamId);\n        if (!team) {\n            return {\n                valid: false,\n                error: 'Team not found'\n            };\n        }\n        if (team.sessionId !== expectedSessionId) {\n            return {\n                valid: false,\n                error: 'Team does not belong to the specified session'\n            };\n        }\n        return {\n            valid: true\n        };\n    }\n    // Get session summary data for a specific session\n    static getSessionSummaryData(sessionId) {\n        const sessionTeams = this.getTeamsForSession(sessionId);\n        return sessionTeams.map((team)=>{\n            const latestAssignment = this.getLatestSessionForTeam(team.id);\n            return {\n                teamId: team.id,\n                teamName: team.name,\n                memberCount: team.applicants.length,\n                isComplete: team.isComplete,\n                hasAssignment: !!(latestAssignment && latestAssignment.assignment),\n                assignmentScore: latestAssignment?.assignment?.totalScore\n            };\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/lib/teamManager.ts\n");

/***/ }),

/***/ "(api-node)/./src/pages/api/sessions.ts":
/*!***********************************!*\
  !*** ./src/pages/api/sessions.ts ***!
  \***********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/sessionManager */ \"(api-node)/./src/lib/sessionManager.ts\");\n/* harmony import */ var _lib_schema__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/schema */ \"(api-node)/./src/lib/schema.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__, _lib_schema__WEBPACK_IMPORTED_MODULE_1__]);\n([_lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__, _lib_schema__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\nasync function handler(req, res) {\n    try {\n        switch(req.method){\n            case 'GET':\n                return handleGetSessions(req, res);\n            case 'POST':\n                return handleCreateSession(req, res);\n            case 'PUT':\n                return handleUpdateSession(req, res);\n            default:\n                res.setHeader('Allow', [\n                    'GET',\n                    'POST',\n                    'PUT'\n                ]);\n                return res.status(405).json({\n                    success: false,\n                    error: `Method ${req.method} not allowed`\n                });\n        }\n    } catch (error) {\n        console.error('Sessions API error:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Internal server error'\n        });\n    }\n}\n// GET /api/sessions - Get all sessions or filter by status\nasync function handleGetSessions(req, res) {\n    const { status } = req.query;\n    let sessions;\n    if (status === 'active') {\n        sessions = _lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getActiveSessions();\n    } else {\n        sessions = _lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__.SessionManager.getAllSessions();\n    }\n    // Filter by status if provided and not 'active' (which is handled above)\n    if (status && status !== 'active') {\n        sessions = sessions.filter((s)=>s.status === status);\n    }\n    return res.status(200).json({\n        success: true,\n        data: sessions,\n        message: `Retrieved ${sessions.length} sessions`\n    });\n}\n// POST /api/sessions - Create a new session\nasync function handleCreateSession(req, res) {\n    const validation = (0,_lib_schema__WEBPACK_IMPORTED_MODULE_1__.validateRequest)(_lib_schema__WEBPACK_IMPORTED_MODULE_1__.CreateSessionSchema, req.body);\n    if (!validation.success) {\n        return res.status(400).json({\n            success: false,\n            error: validation.error\n        });\n    }\n    const { name, description, settings, createdBy } = validation.data;\n    try {\n        const session = _lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__.SessionManager.createSession(name, description || '', createdBy, settings || {});\n        return res.status(201).json({\n            success: true,\n            data: session,\n            message: `Session \"${name}\" created successfully with code: ${session.settings.sessionCode}`\n        });\n    } catch (error) {\n        console.error('Error creating session:', error);\n        return res.status(500).json({\n            success: false,\n            error: 'Failed to create session'\n        });\n    }\n}\n// PUT /api/sessions - Update an existing session\nasync function handleUpdateSession(req, res) {\n    const validation = (0,_lib_schema__WEBPACK_IMPORTED_MODULE_1__.validateRequest)(_lib_schema__WEBPACK_IMPORTED_MODULE_1__.UpdateSessionSchema, req.body);\n    if (!validation.success) {\n        return res.status(400).json({\n            success: false,\n            error: validation.error\n        });\n    }\n    const { sessionId, ...updates } = validation.data;\n    const result = _lib_sessionManager__WEBPACK_IMPORTED_MODULE_0__.SessionManager.updateSession(sessionId, updates);\n    if (!result.success) {\n        return res.status(404).json({\n            success: false,\n            error: result.error\n        });\n    }\n    return res.status(200).json({\n        success: true,\n        data: result.session,\n        message: 'Session updated successfully'\n    });\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./src/pages/api/sessions.ts\n");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "uuid":
/*!***********************!*\
  !*** external "uuid" ***!
  \***********************/
/***/ ((module) => {

module.exports = import("uuid");;

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fsessions&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Csessions.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();